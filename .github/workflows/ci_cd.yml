name: CI-CD
on:
  push: { branches: [ main ] }
  pull_request:

env:
  AWS_REGION: ${{ secrets.AWS_REGION }}
  ACCOUNT_ID: ${{ secrets.AWS_ACCOUNT_ID }}
  ROLE_ARN:   ${{ secrets.AWS_ROLE_TO_ASSUME }}

jobs:
  tests:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with: { python-version: "3.11" }
      - name: Install & test
        run: |
          pip install -r services/svc-api/requirements.txt pytest
          pytest -q
      - name: Smoke-load artifact
        run: |
          python - <<'PY'
          import joblib, pathlib
          b = joblib.load(pathlib.Path("artifacts/loan_default_xgb.joblib"))
          assert {'model','threshold','features'} <= b.keys()
          print("Artifact OK")
          PY

  build-and-push:
    needs: tests
    runs-on: ubuntu-latest
    permissions: { id-token: write, contents: read }
    steps:
      - uses: actions/checkout@v4

      - name: Configure AWS credentials (OIDC)
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ env.ROLE_ARN }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to ECR
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build & push API image
        run: |
          API_REPO=${ACCOUNT_ID}.dkr.ecr.${AWS_REGION}.amazonaws.com/loan-default-api
          docker build -t loan-api:ci -f services/svc-api/Dockerfile .
          docker tag loan-api:ci ${API_REPO}:latest
          docker push ${API_REPO}:latest

      - name: Build & push UI image
        run: |
          UI_REPO=${ACCOUNT_ID}.dkr.ecr.${AWS_REGION}.amazonaws.com/loan-default-ui
          docker build -t loan-ui:ci -f services/svc-ui/Dockerfile .
          docker tag loan-ui:ci ${UI_REPO}:latest
          docker push ${UI_REPO}:latest

  deploy:
    needs: build-and-push
    runs-on: ubuntu-latest
    permissions: { id-token: write, contents: read }
    steps:
      - uses: actions/checkout@v4
      - uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ env.ROLE_ARN }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Update App Runner services to latest
        run: |
          # Set these in repo Variables (Settings → Actions → Variables)
          # SERVICE_ARN_API and SERVICE_ARN_UI
          aws apprunner update-service --service-arn "${{ vars.SERVICE_ARN_API }}" --source-configuration "ImageRepository={ImageIdentifier=${ACCOUNT_ID}.dkr.ecr.${AWS_REGION}.amazonaws.com/loan-default-api:latest,ImageRepositoryType=ECR},AutoDeploymentsEnabled=true"
          aws apprunner update-service --service-arn "${{ vars.SERVICE_ARN_UI }}"  --source-configuration "ImageRepository={ImageIdentifier=${ACCOUNT_ID}.dkr.ecr.${AWS_REGION}.amazonaws.com/loan-default-ui:latest,ImageRepositoryType=ECR},AutoDeploymentsEnabled=true"
